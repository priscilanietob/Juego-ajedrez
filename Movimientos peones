//Codigo con las ventanas separadas de ventana menu y ventana juego

#include <SFML/Graphics.hpp>
#include <iostream>
#include "TableroValores.h"

using namespace std;
using namespace sf;

// Función para cargar texturas desde un archivo
bool cargarTextura(Texture& textura, const string& archivo)
{
    if (!textura.loadFromFile(archivo))
    {
        cerr << "Error al cargar el archivo " << archivo << endl;
        return false;
    }
    return true;
}


int main()
{
    //carga la tipografia arial para las coordenadas
    Font font;
    if (!font.loadFromFile("arial.ttf.ttf")) { //busca el archivo de font y despliega error si no se encuentra.
        cerr << "Error al cargar el archivo de letra." << endl;
        return 0;
    }
    const int numPeones = 8;

    RenderWindow ventanaMenu(VideoMode(600, 330), "Menu Principal"); //Crear ventana para el menu de inicio

    Texture texturaFondo, texturaPlay, texturaSettings, texturaExit; //Crear las texturas de los botones
    cargarTextura(texturaFondo, "fondo.png");
    cargarTextura(texturaPlay, "Play_resized.png");
    cargarTextura(texturaSettings, "Settings_resized.png");
    cargarTextura(texturaExit, "Exit_resized.png");

    Sprite spriteFondo(texturaFondo);//Creo el sprite del fondo
    spriteFondo.setScale((float)ventanaMenu.getSize().x / spriteFondo.getTexture()->getSize().x, (float)ventanaMenu.getSize().y / spriteFondo.getTexture()->getSize().y); //Ajusta el tamaño del sprite del fondo a la ventana

    Sprite play(texturaPlay), Settings(texturaSettings), Exit(texturaExit); //Posicion de las texturas de botones (debe ser la misma que de los botones)
    play.setPosition(100, 50);
    Settings.setPosition(100, 150);
    Exit.setPosition(100, 250);

    // Creacion de botones
    RectangleShape botonPlay(Vector2f(200, 60)); //Tamaño y posicion de los botones
    botonPlay.setPosition(100, 50);

    RectangleShape botonSettings(Vector2f(200, 60));
    botonSettings.setPosition(100, 150);

    RectangleShape botonExit(Vector2f(200, 60));
    botonExit.setPosition(100, 250);

    RectangleShape botonSalirJuego(Vector2f(100, 60));
    botonSalirJuego.setPosition(850, 900);
    botonSalirJuego.setFillColor(Color::Red);

    RenderWindow ventanaJuego(VideoMode(1000, 1000), "Tablero");
    ventanaJuego.setVisible(false);

    vector<Sprite> peonesBlancos(numPeones);
    vector<Sprite> peonesNegros(numPeones);

    // Bucle principal
    while (ventanaMenu.isOpen() || ventanaJuego.isOpen())
    {
        if (ventanaMenu.isOpen())
        {
            Event evento;
            while (ventanaMenu.pollEvent(evento))
            {
                if (evento.type == Event::Closed)
                {
                    ventanaMenu.close();
                }
                else if (evento.type == Event::MouseButtonPressed)
                {
                    if (evento.mouseButton.button == Mouse::Left)
                    {
                        Vector2i mousePos = Mouse::getPosition(ventanaMenu);
                        if (botonPlay.getGlobalBounds().contains(mousePos.x, mousePos.y))
                        {
                            ventanaMenu.setVisible(false);
                            ventanaJuego.setVisible(true);
                        }
                        else if (botonExit.getGlobalBounds().contains(mousePos.x, mousePos.y))
                        {
                            ventanaMenu.close();
                        }
                    }
                }
            }
             ventanaMenu.clear();
             ventanaMenu.draw(spriteFondo);
             ventanaMenu.draw(botonPlay);
             ventanaMenu.draw(play);
             ventanaMenu.draw(botonSettings);
             ventanaMenu.draw(Settings);
             ventanaMenu.draw(botonExit);
             ventanaMenu.draw(Exit);
             ventanaMenu.display();
        }
        if (ventanaJuego.isOpen())
        {
            Event evento;
            while (ventanaJuego.pollEvent(evento))
            {
                if (evento.type == Event::Closed)
                {
                    ventanaJuego.close();
                }
                else if (evento.type == Event::MouseButtonPressed)
                {
                    if (evento.mouseButton.button == Mouse::Left)
                    {
                        Vector2i mousePos = Mouse::getPosition(ventanaJuego);
                        Vector2i clicPos = Mouse::getPosition(ventanaJuego);
                        int clicColumna = clicPos.x / 100; // Obtener la columna donde se hizo clic
                        int clicFila = clicPos.y / 100; // Obtener la fila donde se hizo clic

                        for (int i = 0; i < numPeones; ++i)
                        {
                            // Verificar si se hizo clic en una casilla delante de un peón blanco
                            if (peonesBlancos[i].getPosition().y / 100 == clicFila - 1 && peonesBlancos[i].getPosition().x / 100 == clicColumna)
                            {
                                // Si hay un peón blanco en la fila 6 (índice 1) y se hace clic en la casilla delante de él, puede avanzar una casilla
                                peonesBlancos[i].move(0, -100); // Mover el peón blanco hacia adelante
                                break; // Salir del bucle una vez que se ha movido un peón
                            }

                            // Verificar si se hizo clic en una casilla delante de un peón negro
                            if (peonesNegros[i].getPosition().y / 100 == clicFila + 1 && peonesNegros[i].getPosition().x / 100 == clicColumna)
                            {
                                // Si hay un peón negro en la fila 1 (índice 6) y se hace clic en la casilla delante de él, puede avanzar una casilla
                                peonesNegros[i].move(0, 100); // Mover el peón negro hacia adelante
                                break; // Salir del bucle una vez que se ha movido un peón
                            }
                        }
                        cout << "La pieza esta en la posicion: " << mousePos.x << ", " << mousePos.y << endl;
                    }
                }
            }
            ventanaJuego.clear();


             // Crear el cuadro para el tablero
            RectangleShape cuadro(Vector2f(100, 100));//tamanio de cada cuadro
            bool colorBlanco = true;

            // Funciones que imprimen las imagenes de los peones
            Texture texturaPeonBlanco, texturaPeonNegro;//TEXTURAS DE PEONES
            cargarTextura(texturaPeonBlanco, "Peon_blanco.png");
            cargarTextura(texturaPeonNegro, "Peon_negro.png");

            //TEXTURAS DE TORRES
            Texture texturaTorreBlanca, texturaTorreNegra;
            cargarTextura(texturaTorreBlanca, "Torre_Blanca.png");
            cargarTextura(texturaTorreNegra, "Torre_Negra.png");

            //TEXTURAS DE CABALLOS/KNIGHTS
            Texture texturaCaballoBlanco, texturaCaballoNegro;
            cargarTextura(texturaCaballoBlanco, "Caballo_Blanco.png");
            cargarTextura(texturaCaballoNegro, "Caballo_Negro.png");

            //TEXTURAS DE ALFIL/BISHOP
            Texture texturaAlfilBlanco, texturaAlfilNegro;
            cargarTextura(texturaAlfilBlanco, "Alfil_Blanco.png");
            cargarTextura(texturaAlfilNegro, "Alfil_Negro.png");

            //TEXCTURAS DE LA REINA/QUEEN
            Texture texturaReinaBlanca, texturaReinaNegra;
            cargarTextura(texturaReinaBlanca, "Reina_Blanca.png");
            cargarTextura(texturaReinaNegra, "Reina_Negra.png");

            //TEXTURAS DEL REY/KING
            Texture texturaReyBlanco, texturaReyNegro;
            cargarTextura(texturaReyBlanco, "Rey_Blanco.png");
            cargarTextura(texturaReyNegro, "Rey_Negro.png");

            Sprite PeonBlanco, PeonNegro, TorreBlanca, TorreNegra, CaballoBlanco, CaballoNegro, AlfilBlanco, AlfilNegro, ReinaBlanca, ReinaNegra, ReyBlanco, ReyNegro;

            // Posiciones iniciales de los peones
            const int numPeones = 8;
            Sprite peonesBlancos[numPeones], peonesNegros[numPeones];

            for (int i = 0; i < numPeones; i++)
            {
                //for para establecer la posicion de las piezas
                peonesBlancos[i].setTexture(texturaPeonBlanco);
                peonesNegros[i].setTexture(texturaPeonNegro);

                peonesBlancos[i].setPosition(i * 100, 600);
                peonesNegros[i].setPosition(i * 100, 100);
            }
                // Dibujar el tablero
                for (int i = 0; i < 8; ++i)
                {
                    for (int j = 0; j < 8; ++j)
                    {
                        cuadro.setFillColor(colorBlanco ? Color::White : Color::Black);
                        cuadro.setPosition(j * 100, i * 100);
                        ventanaJuego.draw(cuadro);
                        colorBlanco = !colorBlanco;
                    }
                    colorBlanco = !colorBlanco;
                }

                //define el texto, su tamanio y color
                Text text;
                text.setFont(font);
                text.setCharacterSize(30);
                text.setFillColor(sf::Color::White);

                // posiciones iniciales para letras y numeros
                int letrasss = 30;
                int numeros = 40;

                // Dibujar las letras (A-H)
                for (int i = 0; i < 8; ++i) {
                    char letras = 'A' + i;
                    text.setString(std::string(1, letras));
                    text.setPosition(letrasss + i * 100, 800);
                    ventanaJuego.draw(text);
                }

                // Dibujar los números (1-8)
                for (int i = 0; i < 8; ++i) {
                    char num = '8' - i;
                    text.setString(std::string(1, num));
                    text.setPosition(815, numeros + i * 100);
                    ventanaJuego.draw(text);
                }


                // Dibujar los peones blancos
                for (int i = 0; i < numPeones; i++)
                {
                    ventanaJuego.draw(peonesBlancos[i]);
                }

                // Dibujar los peones negros
                for (int i = 0; i < numPeones; i++)
                {
                    ventanaJuego.draw(peonesNegros[i]);
                }
                //Dibujar los rooks, caballos y bishops
                for (int i = 0; i < 2; i++)
                {
                    TorreBlanca.setTexture(texturaTorreBlanca);
                    TorreNegra.setTexture(texturaTorreNegra);

                    CaballoBlanco.setTexture(texturaCaballoBlanco);
                    CaballoNegro.setTexture(texturaCaballoNegro);

                    AlfilBlanco.setTexture(texturaAlfilBlanco);
                    AlfilNegro.setTexture(texturaAlfilNegro);

                    TorreBlanca.setPosition(i * 700, 0);
                    TorreNegra.setPosition(i * 700, 700);

                    CaballoBlanco.setPosition(i * 500 + 100, 0);
                    CaballoNegro.setPosition(i * 500 + 100, 700);

                    AlfilBlanco.setPosition(i * 300 + 200, 0);
                    AlfilNegro.setPosition(i * 300 + 200, 700);

                    ventanaJuego.draw(TorreBlanca);
                    ventanaJuego.draw(TorreNegra);

                    ventanaJuego.draw(CaballoBlanco);
                    ventanaJuego.draw(CaballoNegro);

                    ventanaJuego.draw(AlfilBlanco);
                    ventanaJuego.draw(AlfilNegro);
                }

                //QUEEN
                ReinaBlanca.setTexture(texturaReinaBlanca);
                ReinaNegra.setTexture(texturaReinaNegra);

                ReinaBlanca.setPosition(300, 0);
                ReinaNegra.setPosition(300, 700);

                ventanaJuego.draw(ReinaBlanca);
                ventanaJuego.draw(ReinaNegra);

                //KING
                ReyBlanco.setTexture(texturaReyBlanco);
                ReyNegro.setTexture(texturaReyNegro);

                ReyBlanco.setPosition(400, 0);
                ReyNegro.setPosition(400, 700);

                ventanaJuego.draw(ReyBlanco);
                ventanaJuego.draw(ReyNegro);

                ventanaJuego.draw(botonSalirJuego);
                if (ventanaJuego.isOpen())
                {
                    Event Cerrar;
                    while (ventanaJuego.pollEvent(Cerrar))
                    {
                        if (Cerrar.type == Event::Closed)
                            ventanaJuego.close();
                        else if (Cerrar.type == Event::MouseButtonPressed)
                        {
                            if (Cerrar.mouseButton.button == Mouse::Left)
                            {
                                Vector2i mousePos = Mouse::getPosition(ventanaJuego);
                                if (botonSalirJuego.getGlobalBounds().contains(mousePos.x, mousePos.y))
                                {
                                    ventanaJuego.close();

                                }
                            }
                        }
                    }
                }

            ventanaJuego.display();
        }
    }
    return 0;
}

/*movimiento::movimiento(int X1, int Y1, int X2, int Y2)
{
    aX=X1;
    aY=Y1;
    X=X2;
    Y=Y2;
}
void tableroAjedrez::PeonBlanco(vector<movimiento> &movimientos, int X, int Y)
{
    if(y>0)
    {
         if(aTablero.arr[x][y-1]==-1)
            {
                movimientos.push_back(movimiento(x, y, x, y-1));
                if(aTablero.arr[x][y-2]==-1 && y==6)
                {
                    movimientos.push_back(movimiento(x, y, x, y-2));
                }
            }
         if (x>0)
            {
                if(aTablero.arr[x-1[y-1]>=6)
                {
                    movimientos.push_back(movimiento(x, y, x-1, y-1));
                }
            }
         if (x<7)
            {
                if(aTablero.arr[x+1[y-1]>=6)
                {
                    movimientos.push_back(movimiento(x, y, x+1, y-1));
                }
            }
    }
}*/
